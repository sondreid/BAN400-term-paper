custom_clean_data_2020(.,
2020,
selectColMale = c(1, 38, 40:59),
selectColFemale =  c(1, 60, 62:81)) %>%
mutate(agegroup = getAgeVector(agegroup),
agegroup = ageUniformityUKVector(agegroup))
# Binding all data frames created except from 2020
data_uk <- do.call("rbind", list(data_uk_2014,
data_uk_2015,
data_uk_2016,
data_uk_2017,
data_uk_2018,
data_uk_2019,
data_uk_2020)) %>%
mutate(gender = genderFunc_vector(gender),
agegroup = getAgeVector(agegroup),
agegroup = ageUniformityUKVector(agegroup),
agegroup = ageGroup_vector(agegroup)) %>%
select(gender,
agegroup,
year,
week ,
deaths,
country) %>%
group_by(gender,
agegroup,
year,
week) %>%
summarise(deaths = sum(deaths)) %>%
ungroup() %>%
mutate(country = "UK") %>%
transform(gender = as.factor(gender),
agegroup = as.factor(agegroup),
week = as.numeric(week),
year = as.numeric(year),
deaths = as.numeric(deaths),
country = as.factor(country))
"Saving the data frame to a .Rda-file for the purpose of analysis.r.
This is done for every data frames we have done in this file, the main purpose
is the the running time issue caused by large datasets, and this will reduce
the loading time significantly."
save(data_uk, file = "../results/data_uk.Rda")
# Removes unwanted df's
rm(data_uk_2014)
rm(data_uk_2015)
rm(data_uk_2016)
rm(data_uk_2017)
rm(data_uk_2018)
rm(data_uk_2019)
rm(data_uk_2020)
##### Data France -----------------------------------------------------------
"Gather csv filename from the France-folder in to a list"
datafiles_france <- list.files(path = "../datasett/France/",
pattern = "*.csv",
full.names = TRUE)
"Sapply() to read each file with read_csv2 with sep = ';',
then bind rows by id. The rest of the code does the cleaning"
data_france <- sapply(datafiles_france, read_csv2, simplify=FALSE) %>%
bind_rows(.id = "id") %>%
rename(day_dead = "JDEC",
month_dead = "MDEC",
year = "ADEC",
day_born = "JNAIS",
month_born = "MNAIS",
year_born = "ANAIS",
gender = "SEXE") %>%
transform(day_born = as.numeric(day_born),
month_born = as.numeric(month_born))  %>% # Replace missing values with NA
mutate(day_born = replace_na(day_born, 1), # Replace NA with 1
month_born = replace_na(month_born, 1),
date_born = ymd(paste(year_born, month_born, day_born)), ### Convert year month to single date of birth
date_dead = ymd(paste(year, month_dead, day_dead)),      ### Convert year month to single date of death
week = week(ymd(paste(year, month_dead, day_dead))),     ## Week of death
age = as.period(interval(date_born, date_dead), unit = "year")$year, ## Age at death
agegroup = ageGroup_vector(age)) %>%
filter(!is.na(agegroup)) %>%
group_by(gender,
agegroup,
year,
week) %>%
summarise(deaths = n()) %>%
ungroup() %>%
mutate(country = "France") %>%
transform(gender = as.factor(gender),
agegroup = as.factor(agegroup),
week = as.numeric(week),
year = as.numeric(year),
deaths = as.numeric(deaths),
country = as.factor(country))
save(data_france, file = "../results/data_france.Rda")
#### Remove functions that are no longer needed in memory ----------------------
rm(ageGroup)
rm(ageGroup_vector)
rm(ageUniformityUK)
rm(ageUniformityUKVector)
rm(changeNonRecurringRow)
rm(clean_data)
rm(custom_clean_data_2020)
rm(genderFunc)
rm(genderFunc_vector)
rm(getAge)
rm(getAgeVector)
rm(datafiles_france)
View(data_france)
datafiles_france <- list.files(path = "../datasett/France/",
pattern = "*.csv",
full.names = TRUE)
"Sapply() to read each file with read_csv2 with sep = ';',
then bind rows by id. The rest of the code does the cleaning"
data_france <- sapply(datafiles_france, read_csv2, simplify=FALSE)
View(data_france)
datafiles_france <- list.files(path = "../datasett/France/",
pattern = "*.csv",
full.names = TRUE)
"Sapply() to read each file with read_csv2 with sep = ';',
then bind rows by id. The rest of the code does the cleaning"
data_france <- sapply(datafiles_france, read_csv2, simplify=FALSE) %>%
bind_rows(.id = "id") %>%
rename(day_dead = "JDEC",
month_dead = "MDEC",
year = "ADEC",
day_born = "JNAIS",
month_born = "MNAIS",
year_born = "ANAIS",
gender = "SEXE")
View(data_france)
View(data_norway)
load("E:/Dokumenter/Google Drive/NHH/Master/BAN400/TermPaper/datasett/.RData")
View(data_norway)
data_norway <- read_excel("../datasett/norway_ssb.xlsx",
range = "Dode1!a4:X1594")
"Reading excel file with given range of rows and columns"
data_norway <- read_excel("../datasett/Norway/norway_ssb.xlsx",
range = "Dode1!a4:X1594")
View(data_norway)
#### Data Norway ---------------------------------------------------------------
"Reading excel file with given range of rows and columns"
data_norway <- read_excel("../datasett/Norway/norway_ssb.xlsx",
range = "Dode1!a4:X1594")
"Changing the empty columns by replicating gender names (1) and agegroups (2)"
data_norway  <- changeNonRecurringRow(data_norway, 1, 53) # For gender
data_norway  <- changeNonRecurringRow(data_norway, 2, 53) # For agegroups
"Manipulating the norway's data frame.
** sapply() iterates through a give vector (column) and performs strsplit for
each element, the specified integer argument in strsplit() decide which element
in the list to retrieve."
data_norway  %<>%
pivot_longer(cols = starts_with("20"),   # Check description for clean_data()
names_to = "year",
values_to = "deaths") %>%
rename(gender = "...1",
agegroup =  "...2",
values = "...3") %>%
mutate(week =   sapply(strsplit(values, " "), `[`, 2),     # **
agegroup = sapply(strsplit(agegroup ,"-"), `[`, 1),
agegroup = sapply(strsplit(agegroup ," "), `[`, 1),
gender = genderFunc_vector(gender),            # Check function section
agegroup = ageGroup_vector(agegroup)) %>%      # Check function section
filter(!is.na(gender),
year >= 2014,
deaths != 0) %>%
group_by(gender,
agegroup,
year,
week) %>%                  # In order to sum deaths into groups
summarise(deaths = sum(deaths)) %>%
ungroup() %>%                       # Ungrouped such that mutation is allowed
mutate(country = "Norway") %>%
transform(gender = as.factor(gender),
agegroup = as.factor(agegroup),
week = as.numeric(week),
year = as.numeric(year),
deaths = as.numeric(deaths),
country = as.factor(country)) # Standardized data type for each col.
options(encoding="utf-8")
"Libraries for retrieval and cleaning"
library(readxl)
library(readr)
library(tidyverse)
library(types)
library(lubridate)
library(janitor)
#### Functions -----------------------------------------------------------------
"Records group-element for a given column and fills empty elements with the
stored element for each new group. The function has following parameters:
df (data frame), column index with datatype numeric and groupnameInterval, data-
type numeric, such that function know the frequency in which the groupname
occurs. The if statement evaluates the occurance of the groupname by using
modulo-operator such that the remainder is equal zero and is not an empty
value NA, then set the new groupname equals name variable. Else, fill the rest
of the given column with stored groupname. Returns the data frame (df)."
changeNonRecurringRow <- function(df,
column =? numeric,
groupnameInterval =? numeric) {
name <- ""
for (i in 1:nrow(df)) {
if ((((i-1) %% groupnameInterval) == 0) && !is.na(df[i, column]) ){
name <- df[i, column]
} else {
df[i, column] <- name
}
}
return (df)
}
"Function to determine gender, by taking a gender of datatype character.
Use if control flow statements and return a standardized gender string if the
specific evaluation criteria is fullfilled. Else, return NA."
genderFunc <- function(gender =? character) {
if (gender == "1") return ("M")
else if (gender == "M") return ("M")
else if (gender == "Menn") return ("M")
else if (gender == "Kvinner") return ("F")
else if (gender == "K") return ("F")
else if (gender == "W") return ("F")
else if (gender == "2") return ("F")
else if (gender == "F") return ("F")
else return (NA)
}
genderFunc_vector <- Vectorize(genderFunc)    # Vectorizing the given function
"Function that returns agegroups for a given age.
Returns standardized agegroup as string"
ageGroup <- function(age) {
age <- as.numeric(age)
if(is.na(age)) return (NA)
else if (0 <= age & age <= 64) return ("0-64")
else if (65 <= age & age <= 79) return ("65-79")
else if (80 <= age & age <= 84) return ("80-84")
else return ("85+")
}
ageGroup_vector <- Vectorize(ageGroup)        # Vectorizing the given function
"Removes - and + from input agestring. Is a simple function that splits the
string by '-' by calling the strsplit-function and extracts the first element
(lowest age) and also arrange that '+' sign by replacing it with an empty string"
getAge <- function(agestring) {
agestring <- (agestring %>%
strsplit(., "-"))[[1]][1] %>%
gsub("\\+", "", .)
return (agestring)
}
getAgeVector <- Vectorize(getAge)       # Vectorizing the given function
"Outputs a specific age for an input ageinterval. Specifically for UK data"
ageUniformityUK <- function(age) {
age <- as.numeric(age)
if(is.na(age)) return (NA)
else if (0 <= age & age <= 14) return (1)
else if (15 <= age & age <= 44) return (15)
else if (45 <= age & age <= 64) return (45)
else if (65 <= age & age <= 74) return (65)
else if (75 <= age & age <= 84) return (80)
else return (85)
}
ageUniformityUKVector <- Vectorize(ageUniformityUK) # Vectorized function
"Function spesific to the UK dataset (2014-2019) that cleans the data.
The function itself transposes the dataset into two separated data frames
of male and female, and rowbinds them at the end.
* pivot_longer() is a function that decreases selected columns and increases
number of rows."
clean_data <- function(df,
year =? chr,
selectColMale,
selectColFemale){
data_male <- as.data.frame(t(df))       # t() transposes the data frame
data_female <- as.data.frame(t(df))
data_male %<>%
row_to_names(row_number = 1) %>%      # First row to column name (janitor)
select(selectColMale) %>%
mutate("Males 5" = replace_na("M")) %>%
rename(gender = "Males 5",
week = "Week number",
"1-" = "Under 1 year") %>%     # Simplifying it for getAge-function
pivot_longer(cols = !c(week, gender), # *
names_to = "agegroup",
values_to = "deaths")
data_female %<>%
row_to_names(row_number = 1) %>%
select(selectColFemale) %>%
mutate("Females 5" = replace_na("W")) %>%
rename(gender = "Females 5",
week = "Week number",
"1-" = "Under 1 year") %>%
pivot_longer(cols = !c(week, gender),   # *
names_to = "agegroup",
values_to = "deaths")
data <- rbind(data_male, data_female) %>% # rowbinds given data frames
mutate(year = rep(year),
country = "United Kingdom") %>%
transform(.,
week = as.numeric(week),
deaths = as.integer(deaths))
return(data)
}
"Function spesific to UK dataset 2020 that cleans the data. Is almost an
exact copy of the functon above, except from some specific arguments caused
of different formatting in the year 2020 for the given dataset. Alternativly,
the function above could be modified in order to fit these formatting issues,
but that would increase the number of paramters. Else, there is no new functions
introduced in this section."
custom_clean_data_2020 <- function(df,
year =? chr,
selectColMale,
selectColFemale){
data_male <- as.data.frame(t(df))
data_female <- as.data.frame(t(df))
data_male %<>%
row_to_names(row_number = 1) %>%
select(selectColMale) %>%
mutate("Males 6" = replace_na("M")) %>%
rename(gender = "Males 6",
week = "Week number",
"1-" = "<1") %>%
pivot_longer(cols = !c(week, gender),
names_to = "agegroup",
values_to = "deaths")
data_female %<>%
row_to_names(row_number = 1) %>%
select(selectColFemale) %>%
mutate("Females 6" = replace_na("W")) %>%
rename(gender = "Females 6",
week = "Week number",
"1-" = "<1") %>%
pivot_longer(cols = !c(week, gender),
names_to = "agegroup",
values_to = "deaths")
data <- rbind(data_male, data_female) %>%
mutate(year = rep(year),
country = "United Kingdom") %>%
transform(.,
week = as.numeric(week),
deaths = as.integer(deaths))
return(data)
}
#### Data Norway ---------------------------------------------------------------
"Reading excel file with given range of rows and columns"
data_norway <- read_excel("../datasett/Norway/norway_ssb.xlsx",
range = "Dode1!a4:X1594")
"Changing the empty columns by replicating gender names (1) and agegroups (2)"
data_norway  <- changeNonRecurringRow(data_norway, 1, 53) # For gender
data_norway  <- changeNonRecurringRow(data_norway, 2, 53) # For agegroups
"Manipulating the norway's data frame.
** sapply() iterates through a give vector (column) and performs strsplit for
each element, the specified integer argument in strsplit() decide which element
in the list to retrieve."
data_norway  %<>%
pivot_longer(cols = starts_with("20"),   # Check description for clean_data()
names_to = "year",
values_to = "deaths") %>%
rename(gender = "...1",
agegroup =  "...2",
values = "...3") %>%
mutate(week =   sapply(strsplit(values, " "), `[`, 2),     # **
agegroup = sapply(strsplit(agegroup ,"-"), `[`, 1),
agegroup = sapply(strsplit(agegroup ," "), `[`, 1),
gender = genderFunc_vector(gender),            # Check function section
agegroup = ageGroup_vector(agegroup)) %>%      # Check function section
filter(!is.na(gender),
year >= 2014,
deaths != 0) %>%
group_by(gender,
agegroup,
year,
week) %>%                  # In order to sum deaths into groups
summarise(deaths = sum(deaths)) %>%
ungroup() %>%                       # Ungrouped such that mutation is allowed
mutate(country = "Norway") %>%
transform(gender = as.factor(gender),
agegroup = as.factor(agegroup),
week = as.numeric(week),
year = as.numeric(year),
deaths = as.numeric(deaths),
country = as.factor(country)) # Standardized data type for each col.
View(data_norway)
format_norway <- read_excel("../datasett/Norway/norway_format.xlsx")
View(format_norway)
data_norway <- read_excel("../datasett/Norway/norway_ssb.xlsx",
range = "Dode1!a4:X1594")
View(data_norway)
format_norway <- read_excel("../datasett/Norway/norway_format.xlsx")
View(format_norway)
View(data_norway)
format_norway <- read_excel("../datasett/Norway/norway_format.xlsx")
View(format_norway)
getwd()
getStandard <- function(country) {
path = paste("../datasett/", country, "/", country, "_format.xlsx")
}
getStandard("Norway")
getStandard <- function(country) {
path = paste("../datasett/", country, "/", country, "_format.xlsx")
print(path)
}
getStandard("Norway")
getStandard <- function(country) {
country <- toLower(country)
path <- paste("../datasett/", country, "/", country, "_format.xlsx")
path %<>% gsub(" ", "")
print(path)
}
getStandard("Norway")
toLower()
help(toLower())
tolower()
tolower("hEI")
getStandard <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, "_format.xlsx")
path %<>% gsub(" ", "")
print(path)
}
getStandard("Norway")
library(tidyverse)
%<>%
getStandard <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, "_format.xlsx")
path %<>% gsub(" ", "",.)
print(path)
}
getStanard("norway")
getStandard("Norway")
getStandard <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, "_format.xlsx")
path %>% gsub(" ", "",.)
print(path)
}
ge
getStandard <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, "_format.xlsx")
path %>% gsub(" ", "",.)
print(path)
}
getStandard("hei")
getStandard <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, "_format.xlsx")
gsub(" ", "",path)
print(path)
}
getStandard <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, "_format.xlsx")
path <- path %>% gsub(" ", "",.)
print(path)
}
getStandard("Norway")
getFormat <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, "_format.xlsx")
path <- path %>% gsub(" ", "",.)
print(path)
return (path)
}
getStandard <- function() {return("../datasett/Datastandard/data_standard.xlsx") }
genderFunc <- function(country) {
countryFormat <- read_excel(getFormat(country)) %>% select(Gender)
standard <- read_excel(getStandard()) %>% select(Gender)
print(standard)
}
genderFunc("Norway")
"Change to allow for multiple datasets, (such as FRance"
getCountry <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, ".xlsx")
path <- path %>% gsub(" ", "",.)
print(path)
return (path)
}
getCountry("Norway")
getCountry <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, ".xlsx")
path <- path %>% gsub(" ", "",.)
return (path)
}
getCountry <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, ".xlsx")
path <- path %>% gsub(" ", "",.)
return (path)
}
getCountry("Norway")
"Change to allow for multiple datasets, (such as FRance"
getCountry <- function(country) {
country <- tolower(country)
path <- paste("../datasett/", country, "/", country, "_data.xlsx")
path <- path %>% gsub(" ", "",.)
return (path)
}
getCountry("Norway")
View(data_norway)
countryFormat <- read_excel(getFormat("Norway")) %>% select(Gender)
View(countryFormat)
countryFormat[1][1]
countryFormat[[1]]
countryFormat[[1]][1]
countryFormat[[2]][1]
countryFormat
countryFormat <- read_excel(getFormat("Norway"))
countryformat
countryFormat
countryFormat[[2]][1]
help(colname)
help(colnames)
genderCol <- colnames(countryFormat)[countryFormat[[2]][1]]
genderCol <- colnames(data_norway)[countryFormat[[2]][1]]
View(format_norway)
View(data_sweden)
View(data_norway)
View(data_sweden)
View(data_uk)
View(data_france)
