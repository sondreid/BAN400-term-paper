############################################################################
standardiseCountry <- function(df, country) {
#' Standardizes a dataframe with regard to age and gender
#' @param df input dataframe
#' @param country name of country, string
df <- df %>%
standardiseGender(., country) %>%
standardiseAge(., country) %>%
drop_na() %>%
transform(gender = as.factor(gender),
agegroup = as.factor(agegroup),
week = as.numeric(week),
year = as.character(year),
deaths = as.numeric(deaths),
country = as.factor(country))
return (df)
}
#Test
norway_standard <- standardiseCountry(data_norway, "Norway")
sweden_standard <- standardiseCountry(data_sweden, "Sweden")
sweden_standard <- standardiseCountry(data_denmark, "Denmark")
###################### Data standardisation script ##########################
"Libraries "
library(readxl)
library(readr)
library(tidyverse)
library(types)
library(lubridate)
library(janitor)
library(docstring)
"In case of sourcing the retrieval file directly to this file"
#source("data_retrieval.r")
getStandard <- function() {
#' Retrieve data standard excel sheet
#' @returns standard dataframe
return(read_csv("../datasett/Datastandard/data_standard.csv")) }
getFormat <- function(country) {
#' Returns the format file of a given country
#' @param country :
#' @returns new dataframe
path <- paste("../datasett/", country, "/") %>% gsub(" ", "",.)
formatFiles <- list.files(path = path,
pattern = "format",
full.names = TRUE)
ListofDF <- lapply(formatFiles, read_csv)
df <- bind_rows(ListofDF)
formatCorrectness(df) # Check for correctness
return (df)
}
formatCorrectness <- function(df) {
#' Checks correctness of format dataframe (imported as csv file)
#' @returns Error messsage if error found
colnames <- colnames(df)
if (!("Gender" %in% colnames) | !("Agegroups" %in% colnames) | !("AgeStandardGroup" %in% colnames)) {
stop("Format error: Missing one or more required columns")
}
if (length(which(!is.na(df$Agegroups))) != length(which(!is.na(df$AgeStandardGroup)))) {
stop("Format error: Missing values in agegroup or agegroupstandard")
}
}
#### Gender -----------------------------
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
#' @returns a gender-standardized dataframe
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
for (k in 1:nrow(df)) {
changedGender <- "No"
for (i in 1:length(format$Gender)) {
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
changedGender <- "Yes"
}
}
if (changedGender == "No") df$gender[k] <- NA
}
df <- df %>%
drop_na()
return (df)
}
#Test
sweden_gender <- standardiseGender(data_sweden, "Sweden")
norway_gender <- standardiseGender(data_norway, "Norway")
#### Age -----------------------------
standardiseAge <- function(df, country) {
#' Returns an age-standardised dataframe
#' We will end up with at the most the same number of unique agegroups, but if we end up with fewer,
#' a group_by -summarise operation is necessary to preserve the number of rows.
#'@param df : input dataframe
#'@param country: name of country to be standardised, string
#'@returns age-standardized dataframe
standard <- getStandard()
format <- getFormat(country)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Agegroups)) {
if (df$agegroup[k] == format$Agegroups[i]) {
standardIndex <-  format$AgeStandardGroup[i]
df$agegroup[k] <- standard$Agegroups[standardIndex]
}
}
}
df <-  df %>%
group_by(gender, agegroup,year,week) %>% #Preserve number of rows
summarise(deaths = sum(deaths),
country = country) %>% unique()
return (df)
}
############################################################################
standardiseCountry <- function(df, country) {
#' Standardizes a dataframe with regard to age and gender
#' @param df input dataframe
#' @param country name of country, string
df <- df %>%
standardiseGender(., country) %>%
standardiseAge(., country) %>%
drop_na() %>%
transform(gender = as.factor(gender),
agegroup = as.factor(agegroup),
week = as.numeric(week),
year = as.character(year),
deaths = as.numeric(deaths),
country = as.factor(country))
return (df)
}
#Test
norway_standard <- standardiseCountry(data_norway, "Norway")
sweden_standard <- standardiseCountry(data_sweden, "Sweden")
denmark_standard <- standardiseCountry(data_denmark, "Denmark")
View(denmark_standard)
#### Data UK ----------------------------------------------------------------
"UK datasets differ in the way they categorize age groups in the periods
2014-2019 and 2020. As a result of that getAgeVector transforms the agegroup
and returns the lower bound of the agegroup as a numeric value. The ageuniformiy
function then places the age in a fitting agegroup."
data_uk_2014 <- read_xls("../datasett/UK/UK_2014.xls",
sheet = "Weekly Figures 2014",
range = "A2:BA40") %>%
clean_data(.,                    # Function call to clean_data
2014,
selectColMale = c(1, 21, 23:29),
selectColFemale =  c(1, 30, 32:38))
data_uk_2015 <- read_xls("../datasett/UK/UK_2015.xls",
sheet = "Weekly Figures 2015",
range = "A3:BB40") %>%
clean_data(.,
2015,
selectColMale = c(1, 20, 22:28),
selectColFemale =  c(1, 29, 31:37))
data_uk_2016 <- read_xls("../datasett/UK/UK_2016.xls",
sheet = "Weekly figures 2016",
range = "A3:BB40") %>%
unite(., x, 1:2, na.rm = TRUE) %>%
clean_data(.,
2016,
selectColMale = c(1, 20, 22:28),
selectColFemale =  c(1, 29, 31:37))
data_uk_2017 <- read_xls("../datasett/UK/UK_2017.xls",
sheet = "Weekly figures 2017",
range = "A3:BB40") %>%
unite(., x, 1:2, na.rm = TRUE) %>%
clean_data(.,
2017,
selectColMale = c(1, 20, 22:28),
selectColFemale =  c(1, 29, 31:37))
data_uk_2018 <- read_xls("../datasett/UK/UK_2018.xls",
sheet = "Weekly figures 2018",
range = "A3:BB40") %>%
unite(., x, 1:2, na.rm = TRUE) %>%
clean_data(.,
2018,
selectColMale = c(1, 20, 22:28),
selectColFemale =  c(1, 29, 31:37))
data_uk_2019 <- read_xls("../datasett/UK/UK_2019.xls",
sheet = "Weekly figures 2019",
range = "A3:BB40") %>%
unite(., x, 1:2, na.rm = TRUE) %>%
clean_data(.,
2019,
selectColMale = c(1, 20, 22:28),
selectColFemale =  c(1, 29, 31:37))
data_uk_2020 <- read_xlsx("../datasett/UK/UK_2020.xlsx",
sheet = "Weekly figures 2020",
range = "A4:AI85") %>%
unite(., x, 1:2, na.rm = TRUE) %>%
custom_clean_data_2020(.,
2020,
selectColMale = c(1, 38, 40:59),
selectColFemale =  c(1, 60, 62:81))
# Binding all data frames created except from 2020
data_uk <- do.call("rbind", list(data_uk_2014,
data_uk_2015,
data_uk_2016,
data_uk_2017,
data_uk_2018,
data_uk_2019,
data_uk_2020)) %>%
select(gender,
agegroup,
year,
week ,
deaths,
country) %>%
group_by(gender,
agegroup,
year,
week) %>%
summarise(deaths = sum(deaths)) %>%
ungroup() %>%
mutate(country = "UK")
View(data_uk)
print(getFormat("UK"))
uk_standard      <- standardiseCountry(data_uk, "UK")
View(uk_standard)
uk_standard      <- standardiseCountry(data_uk, "UK")
View(uk_standard)
"Gather csv filename from the France-folder in to a list"
datafiles_france <- list.files(path = "../datasett/France/",
pattern = "*.csv",
full.names = TRUE)
"Sapply() to read each file with read_csv2 with sep = ';',
then bind rows by id. The rest of the code does the cleaning"
data_france <- sapply(datafiles_france, read_csv2, simplify=FALSE) %>%
bind_rows(.id = "id") %>%
rename(day_dead = "JDEC",
month_dead = "MDEC",
year = "ADEC",
day_born = "JNAIS",
month_born = "MNAIS",
year_born = "ANAIS",
gender = "SEXE") %>%
transform(day_born = as.numeric(day_born),
month_born = as.numeric(month_born))  %>% # Replace missing values with NA
mutate(day_born = replace_na(day_born, 1), # Replace NA with 1
month_born = replace_na(month_born, 1),
date_born = ymd(paste(year_born, month_born, day_born)), ### Convert year month to single date of birth
date_dead = ymd(paste(year, month_dead, day_dead)),      ### Convert year month to single date of death
week = week(ymd(paste(year, month_dead, day_dead))),     ## Week of death
age = as.period(interval(date_born, date_dead), unit = "year")$year, ## Age at death
agegroup = ageGroup_vector(age)) %>%
filter(!is.na(agegroup)) %>%
group_by(gender,
agegroup,
year,
week) %>%
summarise(deaths = n()) %>%
ungroup() %>%
mutate(country = "France") %>%
transform(gender = as.factor(gender),
agegroup = as.factor(agegroup),
week = as.numeric(week),
year = as.numeric(year),
deaths = as.numeric(deaths),
country = as.factor(country))
warnings()
View(data_france)
"Gather csv filename from the France-folder in to a list"
datafiles_france <- list.files(path = "../datasett/France/",
pattern = "*.csv",
full.names = TRUE)
"Sapply() to read each file with read_csv2 with sep = ';',
then bind rows by id. The rest of the code does the cleaning"
data_france <- sapply(datafiles_france, read_csv2, simplify=FALSE) %>%
bind_rows(.id = "id") %>%
rename(day_dead = "JDEC",
month_dead = "MDEC",
year = "ADEC",
day_born = "JNAIS",
month_born = "MNAIS",
year_born = "ANAIS",
gender = "SEXE") %>%
transform(day_born = as.numeric(day_born),
month_born = as.numeric(month_born))  %>% # Replace missing values with NA
mutate(day_born = replace_na(day_born, 1), # Replace NA with 1
month_born = replace_na(month_born, 1),
date_born = ymd(paste(year_born, month_born, day_born)), ### Convert year month to single date of birth
date_dead = ymd(paste(year, month_dead, day_dead)),      ### Convert year month to single date of death
week = week(ymd(paste(year, month_dead, day_dead))),     ## Week of death
age = as.period(interval(date_born, date_dead), unit = "year")$year) %>% ## Age at death
#agegroup = ageGroup_vector(age)) %>%
filter(!is.na(agegroup)) %>%
group_by(gender,
agegroup,
year,
week) %>%
summarise(deaths = n()) %>%
ungroup() %>%
mutate(country = "France")
"Gather csv filename from the France-folder in to a list"
datafiles_france <- list.files(path = "../datasett/France/",
pattern = "*.csv",
full.names = TRUE)
"Sapply() to read each file with read_csv2 with sep = ';',
then bind rows by id. The rest of the code does the cleaning"
data_france <- sapply(datafiles_france, read_csv2, simplify=FALSE) %>%
bind_rows(.id = "id") %>%
rename(day_dead = "JDEC",
month_dead = "MDEC",
year = "ADEC",
day_born = "JNAIS",
month_born = "MNAIS",
year_born = "ANAIS",
gender = "SEXE") %>%
transform(day_born = as.numeric(day_born),
month_born = as.numeric(month_born))  %>% # Replace missing values with NA
mutate(day_born = replace_na(day_born, 1), # Replace NA with 1
month_born = replace_na(month_born, 1),
date_born = ymd(paste(year_born, month_born, day_born)), ### Convert year month to single date of birth
date_dead = ymd(paste(year, month_dead, day_dead)),      ### Convert year month to single date of death
week = week(ymd(paste(year, month_dead, day_dead))),     ## Week of death
agegroup = as.period(interval(date_born, date_dead), unit = "year")$year) %>% ## Age at death
#agegroup = ageGroup_vector(age)) %>%
filter(!is.na(agegroup)) %>%
group_by(gender,
agegroup,
year,
week) %>%
summarise(deaths = n()) %>%
ungroup() %>%
mutate(country = "France")
View(data_france)
View(data_france)
ageToGroup <- function(df) {
standard <- getStandard()
for (k in 1:nrow(df)) {
for (i in 1:length(standard$Agegroups)) {
if (df$agegroup[k] < standard$Agegroups[i]) df$agegroup[k] <- standard
}
}
return (df)
}
standard_france <- ageToGroup(data_france)
View(standard_france)
View(data_france)
(getStandard())$Agegroups
strsplit((getStandard())$Agegroups, "-")
strsplit((getStandard())$Agegroups, "-")[,2]
strsplit((getStandard())$Agegroups, "-")
strsplit((getStandard())$Agegroups, "-")[[2]]
strsplit((getStandard())$Agegroups, "-")[[2]][1]
as.numeric(strsplit((getStandard())$Agegroups, "-")[[2]][1])
ageToGroup <- function(df) {
standard <- getStandard()
for (k in 1:nrow(df)) {
for (i in 1:length(standard$Agegroups)) {
lowerlimit <- as.numeric(strsplit(standard$Agegroups, "-")[[i]][1])
upperlimit <- as.numeric(strsplit(standard$Agegroups, "-")[[i]][2])
if (lowerlimit <= df$agegroup[k] & df$agegroup[k] <= upperlimit) df$agegroup[k] <- standard$Agegroups[i]
}
}
return (df)
}
#Test
standard_france <- ageToGroup(data_france)
data_norway$agegroup[2]
data_france$agegroup[2]
data_france$agegroup[2]
data_france$agegroup[2]
typeof(data_france$agegroup[2])
ageToGroup <- function(df) {
standard <- getStandard()
for (k in 1:nrow(df)) {
for (i in 1:length(standard$Agegroups)) {
lowerlimit <- as.numeric(strsplit(standard$Agegroups, "-")[[i]][1])
print(paste("lower", lowerlimit))
upperlimit <- as.numeric(strsplit(standard$Agegroups, "-")[[i]][2])
if (lowerlimit <= df$agegroup[k] & df$agegroup[k] <= upperlimit) df$agegroup[k] <- standard$Agegroups[i]
}
}
return (df)
}
#Test
standard_france <- ageToGroup(data_france)
ageToGroup <- function(df) {
standard <- getStandard() %>% filter(!is.na(Agegroups))
print(paste("standard", standard))
for (k in 1:nrow(df)) {
for (i in 1:length(standard$Agegroups)) {
lowerlimit <- as.numeric(strsplit(standard$Agegroups, "-")[[i]][1])
print(paste("lower", lowerlimit))
upperlimit <- as.numeric(strsplit(standard$Agegroups, "-")[[i]][2])
if (lowerlimit <= df$agegroup[k] & df$agegroup[k] <= upperlimit) df$agegroup[k] <- standard$Agegroups[i]
}
}
return (df)
}
#Test
standard_france <- ageToGroup(data_france)
data_france$agegroup[22]
data_france$agegroup[6000000]
data_france$agegroup[600]
ageToGroup <- function(df) {
standard <- getStandard() %>% filter(!is.na(Agegroups))
print(paste("standard", standard))
for (k in 1:nrow(df)) {
for (i in 1:length(standard$Agegroups)) {
lowerlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[i]][1])
print(paste("lower", lowerlimit))
upperlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[i]][2])
if (lowerlimit <= df$agegroup[k] & df$agegroup[k] <= upperlimit) df$agegroup[k] <- standard$Agegroups[i]
}
}
return (df)
}
#Test
standard_france <- ageToGroup(data_france)
standard <- getStandard()
strsplit(standard$Agegroups[i], "-")[[2]][1]
strsplit(standard$Agegroups[2], "-")[[2]][1]
strsplit(standard$Agegroups[2], "-")
strsplit(standard$Agegroups[2], "-")[[1]]
strsplit(standard$Agegroups[2], "-")[[1]][1]
ageToGroup <- function(df) {
standard <- getStandard() %>% filter(!is.na(Agegroups))
print(paste("standard", standard))
for (k in 1:nrow(df)) {
for (i in 1:length(standard$Agegroups)) {
lowerlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[1]][1])
print(paste("lower", lowerlimit))
upperlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[1]][2])
if (lowerlimit <= df$agegroup[k] & df$agegroup[k] <= upperlimit) df$agegroup[k] <- standard$Agegroups[i]
}
}
return (df)
}
#Test
standard_france <- ageToGroup(data_france)
getAge <- function(agestring) {
agestring <- (agestring %>%
strsplit(., "-"))[[1]][1] %>%
gsub("\\+", "", .)
return (agestring)
}
ageToGroup <- function(df) {
standard <- getStandard() %>% filter(!is.na(Agegroups))
print(paste("standard", standard))
for (k in 1:nrow(df)) {
for (i in 1:length(standard$Agegroups)) {
#lowerlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[1]][1])
lowerlimit <- getAge(standard$Agegroups[i])
print(paste("lower", lowerlimit))
#upperlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[1]][2])
if (lowerlimit <= df$agegroup[k]) df$agegroup[k] <- standard$Agegroups[i]
}
}
return (df)
}
#Test
standard_france <- ageToGroup(data_france)
View(standard_france)
View(data_france)
View(standard_france)
getAge <- function(agestring) {
agestring <- (agestring %>%
strsplit(., "-"))[[1]][1] %>%
gsub("\\+", "", .)
return (agestring)
}
ageToGroup <- function(df) {
standard <- getStandard() %>% filter(!is.na(Agegroups))
print(paste("standard", standard))
for (k in 1:nrow(df)) {
for (i in 1:length(standard$Agegroups)) {
#lowerlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[1]][1])
lowerlimit <- getAge(standard$Agegroups[i])
#print(paste("lower", lowerlimit))
#upperlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[1]][2])
if (lowerlimit >= df$agegroup[k]) df$agegroup[k] <- standard$Agegroups[i]
}
}
return (df)
}
#Test
standard_france <- ageToGroup(data_france)
View(standard_france)
getAge <- function(agestring, col) {
agestring <- (agestring %>%
strsplit(., "-"))[[1]][col] %>%
gsub("\\+", "", .)
return (agestring)
}
ageToGroup <- function(df) {
standard <- getStandard() %>% filter(!is.na(Agegroups))
print(paste("standard", standard))
for (k in 1:nrow(df)) {
for (i in 1:length(standard$Agegroups)) {
#lowerlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[1]][1])
lowerlimit <- getAge(standard$Agegroups[i], 1)
upperlimit <- getAge(standard$Agegroups[i], 2)
#print(paste("lower", lowerlimit))
#upperlimit <- as.numeric(strsplit(standard$Agegroups[i], "-")[[1]][2])
if (lowerlimit <= df$agegroup[k] & df$agegroup[k] <= upperlimit) df$agegroup[k] <- standard$Agegroups[i]
}
}
return (df)
}
#Test
standard_france <- ageToGroup(data_france)
getAge(standard$Agegroups[3], 1)
getAge(standard$Agegroups[3], 2)
getAge(standard$Agegroups[3], 2)
getAge(standard$Agegroups[4], 2)
getAge(standard$Agegroups[4], 1)
getAge(standard$Agegroups[4], 1)
#Test
norway_standard <- standardiseCountry(data_norway, "Norway")
sweden_standard <- standardiseCountry(data_sweden, "Sweden")
denmark_standard <- standardiseCountry(data_denmark, "Denmark")
uk_standard      <- standardiseCountry(data_uk, "UK")
