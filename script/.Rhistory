plotfunction_diff <- function(df,
agegrouping =? character,
gendervector = c("M", "F"),
countryparam) {
df <- df %>%
filter(agegroup == agegrouping,
gender %in% gendervector,
country == countryparam)
regline_fitted <- loess(df$deaths ~ df$week)
regline_expected <- loess(df$expected_deaths ~ df$week)
plot <- df %>%
mutate(min_reg = pmin(regline_fitted$fitted,
regline_expected$fitted),
max_reg = pmax(regline_fitted$fitted,
regline_expected$fitted)) %>%
ggplot() +
geom_smooth(aes(x = week,
y = deaths,
color = agegroup),
se = FALSE) +             # Confidence interval
geom_smooth(aes(x = week,
y = expected_deaths,
color = "Expected Deaths")) +
geom_ribbon(aes(week,
ymin = min_reg,
ymax = max_reg),
fill = "red",
alpha = 0.5) +
scale_color_viridis(discrete = TRUE) +
ylab("Deaths") +
xlab ("Weeks") +
ggtitle(paste("Expected vs. Actual Deaths in 2020",
"[", countryparam, "]",
"[Agegroup: ", agegrouping, "]")) +
theme_ipsum(base_family = "Helvetica",
plot_title_size = 12,
base_size = 14,
axis_title_size = 12)
return (ggplotly(plot)) # ggplotly for interactivity
}
"Function that finds the number of weeks we have data accounted for in 2020"
weeksin2020 <- function(df) {
return (nrow(df %>%
filter(year == 2020) %>%
select(week) %>%
unique()))
}
minimalweeks <- 52 # Store the lowest common week for which we have data in the current year (2020)
"Function that aggregates deaths (as mean of years prior to 2020) as expected
data, and adds a column for excess deaths to the existing dataframe"
addExpectedDeaths <- function(df) {
weeks2020 <- weeksin2020(df)
if (weeks2020 <  minimalweeks) assign("minimalweeks", weeks2020,envir = .GlobalEnv) # Change global variable minimalweeks
expected_deaths <- df %>%
filter(year < 2020,
week <= weeks2020) %>%
group_by(gender,
agegroup,
week) %>%
summarise(deaths = as.integer(mean(deaths)))
new_df <- df %>%
filter(year == 2020) %>%
mutate(expected_deaths = expected_deaths$deaths,
excess_deaths = deaths - expected_deaths) %>%
select(gender,
agegroup,
year,
week,
country,
deaths,
expected_deaths,
excess_deaths)
return (new_df)
}
"Rowbind all datasets to a combined dataset, calling addExpectedDeaths()"
assembleAllData <- function(dfVector = c("data_norway",
"data_sweden",
"data_denmark",
"data_france",
"data_uk")) {
totaldata <- addExpectedDeaths(eval(as.name(dfVector[1])))
for (i in 2:length(dfVector)) {
totaldata <- rbind(totaldata,
addExpectedDeaths(eval(as.name(dfVector[i]))))
}
totaldata %<>% filter(week <= minimalweeks)
return (totaldata)
}
"Function that takes one data frame, set of agegroups, given genders by
default, one country, selfconstructed .pdf path to store the plot and
prefered y-axis interval. Much of the same description as for the
plotfunction_diff except from the fill-part. At the end it returns an
interactive plot which is facet wraped given by agegroup."
plotfunction <- function(df,
agevector = c("0-64", "65-79", "80-84", "85+"),
gendervector = c("M", "F"),
countryparam,
filename,
ymin = NA,
ymax = NA) {
plot <- df %>%
filter(agegroup %in% agevector,
gender %in% gendervector,
country %in% countryparam) %>%
ggplot() +
geom_smooth(aes(x = week,
y = deaths,
color = agegroup),
se = FALSE) +
geom_smooth(aes(x = week,
y = expected_deaths,
color = "Expected Deaths"),
fill = "lightblue") +
scale_color_viridis(discrete = TRUE) +
ylab("Deaths") +
xlab ("Weeks") +
ggtitle(paste("Expected vs. Actual Deaths in 2020",
"[", countryparam, "]")) +
theme_ipsum(base_family = "Helvetica",
plot_title_size = 12,
base_size = 14,
axis_title_size = 12)
if (!is.na(ymin) | !is.na(ymax)){
plot <- plot + ylim(ymin, ymax)
}
plot <- plot +
facet_wrap(~agegroup, nrow = 1) # Wraps number of agegroups on a single row
ggsave(paste("../results/", filename, sep = ""))
return (ggplotly(plot))           # ggplotly for interactivity
}
"Plots all the agegroups in a country in single plots"
plotter <- function(df, gender = c("M", "F"), country){
for (agegroup in levels(df$agegroup)){
print(plotfunction_diff(df,
agevector = agegroup,
gendervector = gender,
country = country))
}
}
"Stores created plots in pdf-file"
plot_pdf <- function(filename, plot){
pdf(paste("../results/",filename, sep=""), onefile = TRUE)
plotter(plot)
dev.off()
}
#### Total Data ----------------------------------------------------------------
"Totaldata is a dataframe which contains all the created data frames to
a consolidated data frame"
totaldata <- assembleAllData()
##### Test statistics-----------------------------------------------------------
"Is the difference in deaths and expected deaths statistically significant?"
"Function that conducts a two sided welch t.test to test whether 2020
deaths are statistically different than expected deaths. Compares x_mean and
y_mean to find out whether deaths are higher or lower. Tags the p.value along
with a string indicating whether it is above or below the estimated deaths, and
returns them as a list"
t_testFunc <- function(df,
agegroupvector = c("0-64", "65-79", "80-84", "85+"),
countryparam =? character ) {
testset <- df %>%
filter(country == countryparam,
agegroup %in% agegroupvector,
week >= 12) %>%
group_by(week) %>%
summarise(deaths = sum(deaths),
expected_deaths = sum(expected_deaths)) %>%
select(deaths,
expected_deaths)
t_test <- t.test(testset$deaths,
testset$expected_deaths,
alternative = "two.sided",
var.equal = FALSE)
# Determine whether the mean estimate mean deaths are higher or
# lower than the expected deaths
x_mean <- as.integer(t_test$estimate[1])
y_mean <- as.integer(t_test$estimate[2])
if (x_mean < y_mean) {return(list("Below", t_test$p.value)) }
else return(list("Above", t_test$p.value))
}
"Function that returns a string
Calls t_testFunc on a given country, uses totaldata as df as opposed to tabledata.
Returns a string based on the result from t_test_func."
tableTests <- function(country) {
test <- t_testFunc(totaldata,
agegroupvector = c("0-64", "65-79", "80-84", "85+"),
countryparam = country)
p.value <- test[[2]]
outputlist <- list(test[[1]], p.value)
if (p.value > 0.15) outputlist[[1]] <- "Normal"
else if (test[[1]] == "Above") {
if      (p.value < 0.025) outputlist[[1]] <- "Above ***"
else if (p.value < 0.05)  outputlist[[1]] <- "Above **"
else if (p.value < 0.15)  outputlist[[1]] <- "Above *"
}
else if (test[[1]] == "Below")  {
if      (p.value < 0.025) outputlist[[1]] <- "Below ***"
else if (p.value < 0.05)  outputlist[[1]] <- "Below **"
else if (p.value < 0.15)  outputlist[[1]] <- "Below *"
}
return (outputlist)
}
" Returns the first element of a list generated by tableTests func"
getTableTestFirst <- function(country) {
return (tableTests(country)[[1]])
}
getTableTestFirst <- Vectorize(getTableTestFirst)
" Returns the second element of a list generated by tableTests func"
getTableTestPvalue <- function(country) {
return (round(tableTests(country)[[2]], 4))
}
getTableTestPvalue <- Vectorize(getTableTestPvalue)
## Tables  ---------------------------------------------------------------------
totaldataFilter <- totaldata %>% filter(week >= 12)
shortTable_data <- totaldataFilter  %>%
group_by(country) %>%
summarise(excess_deaths = sum(excess_deaths)) %>%
## Max excess deaths per week
cbind(.,
totaldataFilter %>%
group_by(country, week) %>%
summarise(excess_deaths = sum(excess_deaths)) %>%
group_by(country) %>%
filter(excess_deaths == max(excess_deaths)) %>%
rename(max_deaths_perweek = excess_deaths )) %>%
select(-3) %>%
## Percentage above normal
cbind(.,
totaldataFilter %>% filter(week >= 12) %>%
group_by(country) %>%
summarise(percentage_above_normal = percent((
sum(deaths)/sum(expected_deaths)))) %>%
select(-country)) %>%
mutate(statistically_significant = getTableTestFirst(country),
p.value = getTableTestPvalue(country)) %>%
rename("Country"                          = country,
"Total Excess Deaths"              = excess_deaths,
"Highest Excess Deaths in a Week"  = max_deaths_perweek,
"Week: Highest Excess deaths"      = week,
"Percentage of Normal Deaths"      = percentage_above_normal,
"Statistically Significant"        = statistically_significant,
"P-value"                          = p.value)
"Function that returns shortTableData using the formattable package"
shortTable <- function() {
lightred = "#ff7f7f"
outputTable <- formattable(shortTable_data, list(
"Total Excess Deaths"              = color_tile("white", lightred),
"Highest Excess Deaths in a Week"  = color_bar(lightred),
"Percentage of Normal Deaths"      = color_bar(lightred),
"Statistically Significant"        =
formatter("span", style = x ~ ifelse(substring(x, 1, 5) == "Above",
style(color = "red",
font.weight = "bold"),
NA))))
return (outputTable)
}
"Function that returns a sortable table which contains weekly deaths, expected
deaths and excess deaths according to agegroup and gender"
longTable <- function() {
outputtable <- datatable(totaldata %>%
select(-year),
colnames = c("Gender",
"Agegroup",
"Week",
"Country",
"Deaths",
"Expected Deaths",
"Excess Deaths"),
filter = "top",
options = list(pageLength = 20, autoWidth = TRUE),
class = 'cell-border stripe'
)
return (outputtable)
}
save(shortTable, shortTable_data, file = "Shiny/data/tableData.Rda")
save(totaldata, file = "Shiny/data/totaldata.Rda")
View(totaldata)
######################### ML script/prediction script #################################
"Support for utf-8 encoding"
options(encoding="utf-8")
"Libraries"
library(caret)
library(dplyr)
library(magrittr)
library(gbm)
library(docstring)
library(ggplot2)
library(doParallel)
library(randomForest)
library(plotly)
library(forecastML)
"Loading data frames retrieved from standardisation.r"
"load totaldata"
load("Shiny/data/totaldata.Rda")
#### Data selection --------------------------------------------
aggregateColumn <- function(df = totaldata,
column) {
#' Function that aggregates a column of an input dataframe by grouping all columns except the chosen column
#' @param df: input dataframe, per default totaldata
#' @param column: column to be aggregated
#' @return : a modified dataframe
columns <- c("week", "country", "gender", "agegroup")
columns %<>% setdiff(., column)
print(columns)
df %<>%
group_by_at(columns) %>%
summarise(
deaths = sum(deaths),
excess_deaths = sum(excess_deaths)) %>%
mutate(!!column := "All")
return (df)
}
totaldata %<>%
transform(
country = as.factor(country),
year   = as.factor(year)) %>%
select(week, country, gender, agegroup, deaths, excess_deaths) %>%
rbind(., totaldata %>%  ## Add aggregate for gender and agegroup (deaths and excess deaths for all genders and agegroups for a week)
group_by(country, week) %>%
summarise(gender = "All", agegroup = "All", deaths = sum(deaths), excess_deaths = sum(excess_deaths))) %>%
rbind(., aggregateColumn(df = totaldata, "agegroup")) %>%
rbind(., aggregateColumn(df = totaldata, "gender"))
forecastData <- totaldata # Store totaldata with week feature
totaldata %<>% #Keep totaldata as ML prediction dataframe, but without week feature
select(-week)
intrain <- createDataPartition(y = totaldata$excess_deaths,
p = 0.8,
list = FALSE)
# Splitting data ---------------------------------------------
training_data <- totaldata[intrain,] #%>% select(excess_deaths,week)
test_data     <- totaldata[-intrain,]
## Model creation -----------------------------------------
#Make clusters
cl <- makePSOCKcluster(detectCores())
registerDoParallel(cl)
control <- trainControl(method = "repeatedcv",
n = 15,
repeats = 10)
RFmodel <- train(excess_deaths ~.,
data = training_data,
method = "rf",
metric = "RMSE",
trcontrol = control)
SVMmodel <- train(excess_deaths ~.,
data = training_data,
method = "svmPoly",
metric = "RMSE",
trcontrol = control,
tunelength = 4)
SVMRadialmodel <- train(excess_deaths ~.,
data = training_data,
method = "svmRadial",
metric = "RMSE",
trcontrol = control,
tunelength = 4)
GBMModel <-       train(excess_deaths~.,
data = training_data,
method = "gbm",
trcontrol = control,
verbose =0)
GBMModel <- gbm(
formula = excess_deaths~.,
distribution = "gaussian",
data = training_data,
n.trees = 10000,
interaction.depth = 1,
shrinkage = 0.001,
cv.folds = 5,
verbose = FALSE
)
### Evaluation -----------------------------------------------------------------------
modelList <- list(SVMmodel, RFmodel, SVMRadialmodel, GBMModel)
evaluateModels <- function(modelList, testData, feature) {
#' Returns the best fitted model based on RMSE ( )
#' Starts with a best RMSE of infinity, and stores iteratively the best observed RMSE
#' Returns the best model
#'@param modelList: list of potential models
bestRMSE <- Inf
bestModel <- modelList[1]
for (model in modelList) {
prediction <- predict(model, newdata = testData)
RMSE <- postResample(pred = prediction, obs = testData[[feature]])[[1]]
if (RMSE < bestRMSE) {
assign("bestRMSE", RMSE,envir = .GlobalEnv)
assign("bestModel", model,envir = .GlobalEnv)
}
}
return (bestModel)
}
bestModel <- evaluateModels(modelList, test_data, "excess_deaths") # Store best model av bestModel
### Prediction ---------------------------------------------...
predict_excess_deaths <- function(model = bestModel, country,gender,agegroup,deaths){
#'
#'Returns a prediction based on an input regression model and attributes of country, gender, agegroup and number of deaths
#'As per default the bestModel is chosen
#'@param model: input ML model, the best Model determined by evaluateModels() per default
#'@param country: String, country name
#'@param gender: String, gender name
#'@param agegroup: String, interval of ages(predetermined agegroups)
#'@param deaths : Integer, number of deaths (per week for a given set of attributes)
df <-
data.frame(
country = as.factor(country),
gender = as.factor(gender),
agegroup = as.factor(agegroup),
deaths = as.numeric(deaths)
)
return (as.integer(predict(model,
newdata = df)))
}
#### Forecast ----------------------------------------------------
"Aggregate features
We only want to keep the aggregate of gender and agegroup "
forecastData %<>%
filter(gender == "All",
agegroup == "All") %>%
select(week, country, deaths, excess_deaths)
model_function <- function(df) {
#' Model function
#' @param df: input dataframe
model <- randomForest::randomForest(excess_deaths ~., data = df, ntree = 200)
return(model)
}
pred_function <- function(model, data_features) {
#' Prediction function
#' @param model: a forecast model
#' @param data_features: features in dataframe (except outcome feature)
data_pred <- data.frame("y_pred" = predict(model, data_features))
return(data_pred)
}
train_model_country <- function(countryname, outcome_column = 4, horizon = 10) {
#' Train a forecast model with
df <- forecastData %>%
filter(country == countryname)
forecast_data_list <- create_lagged_df(df,
type = "train",
method = "direct",
outcome_col = outcome_column,
lookback = 1:15,
horizons = 1:horizon,
dynamic_features ="law")
windows <- create_windows(lagged_df = forecast_data_list,
window_length = 0)
forecast_model <- forecastML::train_model(forecast_data_list, windows, model_name = "RF",
model_function, use_future = FALSE)
data_forecast_list <- create_lagged_df(df,
type = "forecast",
method = "direct",
outcome_col = outcome_column,
lookback = 1:15,
frequency = "week",
horizons = 1:10)
data_forecasts <- predict(forecast_model,
prediction_function =list(pred_function),
data = data_forecast_list)
data_forecasts <- forecastML::combine_forecasts(data_forecasts)
return (data_forecasts)
}
forecast_country <- function(df = forecastData, countryname) {
#' Function that combines the estimates of excess deaths found in a dataframe (forecastData)
#' and row binds them to a forecas made by the train_country function
#'@param df: dataframe with all country data
#'@param countryname: String name of country
latestweek <- tail(df[order(df$week),]$week, n =  1)
country_forecast <- train_model_country(countryname = countryname)
country_forecast %<>%
rename("week" = horizon, "excess_deaths" = excess_deaths_pred) %>%
mutate(country = countryname,
week = week + latestweek,
type = "Forecast") %>%
select(week, country, type, excess_deaths)
df %<>%
filter(week <= latestweek,
country == countryname) %>%
mutate(type = "Estimate") %>%
select(week, country, type, excess_deaths)
df %<>%
rbind(., country_forecast) %>%
transform(type = as.factor(type))
return(df)
}
generate_forecast_plot <- function(countryname) {
#' Function that generates a plot based on the forecast generated by 'forecast_country'
#' Based on the dataframe generated, display a coloured plot of estimated and forecasted excess_deaths
#' @param countryname: string, name of country
df <- forecast_country(countryname = countryname)
plot <- df %>%
ggplot() +
geom_smooth(aes(x = week,
y = excess_deaths,
colour = type)) +
labs(x = "Weeks", y = "Excess deaths") +
theme(plot.background=element_rect()) +
ggtitle(paste(countryname, "estimated and forecasted excess deaths"))
ggplotly(plot)
}
generate_forecast_plot(countryname = "UK")
stopCluster(cl) #Stop cluster
MLdata <- totaldata #Change name of totaldata
# Save model -----------------------------------------
"Save the prediction ML model and necessary forecast data and functions in a Rda file
for quick loading into memory for use in other rscripts (such as the shiny application)"
save(bestModel,
MLdata,
predict_excess_deaths,
forecastData,
model_function,
pred_function,
generate_forecast_plot,
forecast_country,
train_model_country,
file = "Shiny/data/MLModel.Rda")
View(bestModel)
