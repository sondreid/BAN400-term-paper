#'@param df : input dataframe
#'@param country: name of country to be standardised, string
standard <- getStandard()
format <- getFormat(country)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Agegroups)) {
if (df$agegroup[k] == format$Agegroups[i]) {
index <-  format$AgeStandardGroup[i]
print(paste("Index", index))
df$agegroup[k] <- standard$Agegroups[index]
}
}
}
return (df)
}
# test
norway_standard <- standardiseAge(data_norway, "Norway")
View(norway_standard)
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
standard <- getStandard()
format <- getFormat(Country)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
if (df$Gender[k] == format$Gender[i]) df$Gender[k] <- standard$Gender[i]
else df$Gender[k] <- NA
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
View(data_norway)
data_norway$gender
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
standard <- getStandard()
format <- getFormat(Country)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
if (df$gender[k] == format$Gender[i]) df$Gender[k] <- standard$Gender[i]
else df$gender[k] <- NA
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
standard <- getStandard()
format <- getFormat(Country)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
if (df$gender[k] == format$Gender[i]) df$gender[k] <- standard$Gender[i]
else df$gender[k] <- NA
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
standard <- getStandard()
format <- getFormat(country)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
if (df$gender[k] == format$Gender[i]) df$gender[k] <- standard$Gender[i]
else df$gender[k] <- NA
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
getStandard()$gender
getStandard()$Gender
getStandard()$Gender
getStandard()$Gender
getStandard()$Gender
getStandard()$Gender
getStandard()$Gender
standard <- getStandard() %>% filter(!is.na(Gender))
View(standard)
getFormat("Norway") %>% filter(!is.na(Gender))
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
if (df$gender[k] == format$Gender[i]) df$gender[k] <- standard$Gender[i]
else df$gender[k] <- NA
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
}
else {
df$gender[k] <- NA
}
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
getFormat(country) %>% filter(!is.na(Gender))$Gender
getFormat("Norway") %>% filter(!is.na(Gender))$Gender
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
standard <- getStandard()
format <- getFormat(country)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
}
else {
df$gender[k] <- NA
}
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
print(paste("i", i, "k", k))
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
}
else {
df$gender[k] <- NA
}
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
#'
print(df$gender)
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
print(paste("i", i, "k", k))
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
}
else {
df$gender[k] <- NA
}
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
#'
print(df$gender)
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
print(format)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
print(paste("i", i, "k", k))
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
}
else {
df$gender[k] <- NA
}
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
#### Gender -----------------------------
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
#'
print(df$gender)
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
print(format)
print(standard)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
print(paste("i", i, "k", k))
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
}
else {
df$gender[k] <- NA
}
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
#'
print(df$gender)
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
print(format)
print(standard)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
print(paste("df", df$gender[k], "format", format$Gender[i]))
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
}
else {
df$gender[k] <- NA
}
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
getFormat("Norway") %>% filter(!is.na(Gender))
(getFormat("Norway") %>% filter(!is.na(Gender)))$Gender
View(data_norway)
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
#'
print(df$gender)
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
print(format)
print(standard)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Gender)) {
print(paste("df", df$gender[k], "format", format$Gender[i]))
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
}
}
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
View(genderStandardNorway)
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
#'
print(df$gender)
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
print(format)
print(standard)
for (k in 1:nrow(df)) {
changeGender <- "No"
for (i in 1:length(format$Gender)) {
print(paste("df", df$gender[k], "format", format$Gender[i]))
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
changeGender <- "Yes"
}
}
if (changeGender == "No") df$gender[k] <- NA
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
View(genderStandardNorway)
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
#'
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
for (k in 1:nrow(df)) {
changedGender <- "No"
for (i in 1:length(format$Gender)) {
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
changedGender <- "Yes"
}
}
if (changedGender == "No") df$gender[k] <- NA
}
df <- df%>% drop_na()
return (df)
}
#Test
genderStandardNorway <- standardiseGender(data_norway, "Norway")
View(genderStandardNorway)
standardiseCountry <- function(df, country) {
#' Standardizes a dataframe according to the standards present in getStandard() sheet
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
df <- df %>%
standardiseGender(., country) %>%
standardiseAge(., country) %>%
drop_na() %>%
transform(gender = as.factor(gender),
agegroup = as.factor(agegroup),
week = as.numeric(week),
year = as.character(year),
deaths = as.numeric(deaths),
country = as.factor(country))
return (df)
}
#Test
norway_standard <- standardiseCountry(data_norway, "Norway")
View(norway_standard)
View(data_norway)
###################### Data standardisation script ##########################
"Libraries "
library(readxl)
library(readr)
library(tidyverse)
library(types)
library(lubridate)
library(janitor)
library(docstring)
"In case of sourcing the retrieval file directly to this file"
#source("data_retrieval.r")
getStandard <- function() {
#' Retrieve data standard excel sheet
#' @returns standard dataframe
return(read_csv("../datasett/Datastandard/data_standard.csv")) }
getFormat <- function(country) {
#' Returns the format file of a given country
#' @param country :
#' @returns new dataframe
path <- paste("../datasett/", country, "/") %>% gsub(" ", "",.)
formatFiles <- list.files(path = path,
pattern = "format",
full.names = TRUE)
ListofDF <- lapply(formatFiles, read_csv)
df <- bind_rows(ListofDF)
formatCorrectness(df) # Check for correctness
return (df)
}
formatCorrectness <- function(df) {
#' Checks correctness of format dataframe (imported as csv file)
#' @returns Error messsage if error found
colnames <- colnames(df)
if (!("Gender" %in% colnames) | !("Agegroups" %in% colnames) | !("AgeStandardGroup" %in% colnames)) {
stop("Format error: Missing one or more required columns")
}
if (length(which(!is.na(testFormat$Agegroups))) != length(which(!is.na(testFormat$AgeStandardGroup)))) {
stop("Format error: Missing values in agegroup or agegroupstandard")
}
}
#### Gender -----------------------------
standardiseGender <- function(df, country) {
#' In column gender, the function loops through all rows.
#' If it finds a match between the genderVector and standardGender it will return the standardGender
#' NA otherwise
#' @param df input dataframe
#' @param genderVec vector of original gender formatting in df
#'
standard <- getStandard() %>% filter(!is.na(Gender))
format <- getFormat(country) %>% filter(!is.na(Gender))
for (k in 1:nrow(df)) {
changedGender <- "No"
for (i in 1:length(format$Gender)) {
if (df$gender[k] == format$Gender[i]) {
df$gender[k] <- standard$Gender[i]
changedGender <- "Yes"
}
}
if (changedGender == "No") df$gender[k] <- NA
}
df <- df%>% drop_na()
return (df)
}
#### Age -----------------------------
standardiseAge <- function(df, country) {
#' Returns an age-standardised dataframe
#'
#'@param df : input dataframe
#'@param country: name of country to be standardised, string
standard <- getStandard()
format <- getFormat(country)
for (k in 1:nrow(df)) {
for (i in 1:length(format$Agegroups)) {
if (df$agegroup[k] == format$Agegroups[i]) {
standardIndex <-  format$AgeStandardGroup[i]
df$agegroup[k] <- standard$Agegroups[standardIndex]
}
}
}
return (df)
}
############################################################################
standardiseCountry <- function(df, country) {
#' Standardizes a dataframe with regard to age and gender
#' @param df input dataframe
#' @param country name of country, string
df <- df %>%
standardiseGender(., country) %>%
standardiseAge(., country) %>%
drop_na() %>%
transform(gender = as.factor(gender),
agegroup = as.factor(agegroup),
week = as.numeric(week),
year = as.character(year),
deaths = as.numeric(deaths),
country = as.factor(country))
return (df)
}
#Test
norway_standard <- standardiseCountry(data_norway, "Norway")
View(norway_standard)
