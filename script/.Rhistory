addExpectedDeaths <- function(df) {
weeks2020 <- weeksin2020(df)
if (weeks2020 <  minimalweeks) assign("minimalweeks", weeks2020,envir = .GlobalEnv) # Change global variable minimalweeks
expected_deaths <- df %>%
filter(year < 2020,
week <= weeks2020) %>%
group_by(gender,
agegroup,
week) %>%
summarise(deaths = as.integer(mean(deaths)))
new_df <- df %>%
filter(year == 2020) %>%
mutate(expected_deaths = expected_deaths$deaths,
excess_deaths = deaths - expected_deaths) %>%
select(gender,
agegroup,
year,
week,
country,
deaths,
expected_deaths,
excess_deaths)
return (new_df)
}
"Rowbind all datasets to a combined dataset, calling addExpectedDeaths()"
assembleAllData <- function(dfVector = c("data_norway",
"data_sweden",
"data_denmark",
"data_france",
"data_uk")) {
totaldata <- addExpectedDeaths(eval(as.name(dfVector[1])))
for (i in 2:length(dfVector)) {
totaldata <- rbind(totaldata,
addExpectedDeaths(eval(as.name(dfVector[i]))))
}
totaldata %<>% filter(week <= minimalweeks)
return (totaldata)
}
"Function that takes one data frame, set of agegroups, given genders by
default, one country, selfconstructed .pdf path to store the plot and
prefered y-axis interval. Much of the same description as for the
plotfunction_diff except from the fill-part. At the end it returns an
interactive plot which is facet wraped given by agegroup."
plotfunction <- function(df,
agevector = c("0-64", "65-79", "80-84", "85+"),
gendervector = c("M", "F"),
countryparam,
filename,
ymin = NA,
ymax = NA) {
plot <- df %>%
filter(agegroup %in% agevector,
gender %in% gendervector,
country %in% countryparam) %>%
ggplot() +
geom_smooth(aes(x = week,
y = deaths,
color = agegroup),
se = FALSE) +
geom_smooth(aes(x = week,
y = expected_deaths,
color = "Expected Deaths"),
fill = "lightblue") +
scale_color_viridis(discrete = TRUE) +
ylab("Deaths") +
xlab ("Weeks") +
ggtitle(paste("Expected vs. Actual Deaths in 2020",
"[", countryparam, "]")) +
theme_ipsum(base_family = "Helvetica",
plot_title_size = 12,
base_size = 14,
axis_title_size = 12)
if (!is.na(ymin) | !is.na(ymax)){
plot <- plot + ylim(ymin, ymax)
}
plot <- plot +
facet_wrap(~agegroup, nrow = 1) # Wraps number of agegroups on a single row
ggsave(paste("../results/", filename, sep = ""))
return (ggplotly(plot))           # ggplotly for interactivity
}
"Plots all the agegroups in a country in single plots"
plotter <- function(df, gender = c("M", "F"), country){
for (agegroup in levels(df$agegroup)){
print(plotfunction_diff(df,
agevector = agegroup,
gendervector = gender,
country = country))
}
}
"Stores created plots in pdf-file"
plot_pdf <- function(filename, plot){
pdf(paste("../results/",filename, sep=""), onefile = TRUE)
plotter(plot)
dev.off()
}
#### Total Data ----------------------------------------------------------------
"Totaldata is a dataframe which contains all the created data frames to
a consolidated data frame"
totaldata <- assembleAllData()
##### Test statistics-----------------------------------------------------------
"Is the difference in deaths and expected deaths statistically significant?"
"Function that conducts a two sided welch t.test to test whether 2020
deaths are statistically different than expected deaths. Compares x_mean and
y_mean to find out whether deaths are higher or lower. Tags the p.value along
with a string indicating whether it is above or below the estimated deaths, and
returns them as a list"
t_testFunc <- function(df,
agegroupvector = c("0-64", "65-79", "80-84", "85+"),
countryparam =? character ) {
testset <- df %>%
filter(country == countryparam,
agegroup %in% agegroupvector,
week >= 12) %>%
group_by(week) %>%
summarise(deaths = sum(deaths),
expected_deaths = sum(expected_deaths)) %>%
select(deaths,
expected_deaths)
t_test <- t.test(testset$deaths,
testset$expected_deaths,
alternative = "two.sided",
var.equal = FALSE)
# Determine whether the mean estimate mean deaths are higher or
# lower than the expected deaths
x_mean <- as.integer(t_test$estimate[1])
y_mean <- as.integer(t_test$estimate[2])
if (x_mean < y_mean) {return(list("Below", t_test$p.value)) }
else return(list("Above", t_test$p.value))
}
"Function that returns a string
Calls t_testFunc on a given country, uses totaldata as df as opposed to tabledata.
Returns a string based on the result from t_test_func."
tableTests <- function(country) {
test <- t_testFunc(totaldata,
agegroupvector = c("0-64", "65-79", "80-84", "85+"),
countryparam = country)
p.value <- test[[2]]
outputlist <- list(test[[1]], p.value)
if (p.value > 0.15) outputlist[[1]] <- "Normal"
else if (test[[1]] == "Above") {
if      (p.value < 0.025) outputlist[[1]] <- "Above ***"
else if (p.value < 0.05)  outputlist[[1]] <- "Above **"
else if (p.value < 0.15)  outputlist[[1]] <- "Above *"
}
else if (test[[1]] == "Below")  {
if      (p.value < 0.025) outputlist[[1]] <- "Below ***"
else if (p.value < 0.05)  outputlist[[1]] <- "Below **"
else if (p.value < 0.15)  outputlist[[1]] <- "Below *"
}
return (outputlist)
}
" Returns the first element of a list generated by tableTests func"
getTableTestFirst <- function(country) {
return (tableTests(country)[[1]])
}
getTableTestFirst <- Vectorize(getTableTestFirst)
" Returns the second element of a list generated by tableTests func"
getTableTestPvalue <- function(country) {
return (round(tableTests(country)[[2]], 4))
}
getTableTestPvalue <- Vectorize(getTableTestPvalue)
## Tables  ---------------------------------------------------------------------
totaldataFilter <- totaldata %>% filter(week >= 12)
shortTable_data <- totaldataFilter  %>%
group_by(country) %>%
summarise(excess_deaths = sum(excess_deaths)) %>%
## Max excess deaths per week
cbind(.,
totaldataFilter %>%
group_by(country, week) %>%
summarise(excess_deaths = sum(excess_deaths)) %>%
group_by(country) %>%
filter(excess_deaths == max(excess_deaths)) %>%
rename(max_deaths_perweek = excess_deaths )) %>%
select(-3) %>%
## Percentage above normal
cbind(.,
totaldataFilter %>% filter(week >= 12) %>%
group_by(country) %>%
summarise(percentage_above_normal = percent((
sum(deaths)/sum(expected_deaths)))) %>%
select(-country)) %>%
mutate(statistically_significant = getTableTestFirst(country),
p.value = getTableTestPvalue(country)) %>%
rename("Country"                          = country,
"Total Excess Deaths"              = excess_deaths,
"Highest Excess Deaths in a Week"  = max_deaths_perweek,
"Week: Highest Excess deaths"      = week,
"Percentage of Normal Deaths"      = percentage_above_normal,
"Statistically Significant"        = statistically_significant,
"P-value"                          = p.value)
"Function that returns shortTableData using the formattable package"
shortTable <- function() {
lightred = "#ff7f7f"
outputTable <- formattable(shortTable_data, list(
"Total Excess Deaths"              = color_tile("white", lightred),
"Highest Excess Deaths in a Week"  = color_bar(lightred),
"Percentage of Normal Deaths"      = color_bar(lightred),
"Statistically Significant"        =
formatter("span", style = x ~ ifelse(substring(x, 1, 5) == "Above",
style(color = "red",
font.weight = "bold"),
NA))))
return (outputTable)
}
"Function that returns a sortable table which contains weekly deaths, expected
deaths and excess deaths according to agegroup and gender"
longTable <- function() {
outputtable <- datatable(totaldata %>%
select(-year),
colnames = c("Gender",
"Agegroup",
"Week",
"Country",
"Deaths",
"Expected Deaths",
"Excess Deaths"),
filter = "top",
options = list(pageLength = 20, autoWidth = TRUE),
class = 'cell-border stripe'
)
return (outputtable)
}
save(shortTable_data, shortTable, file = "Shiny/data/table.Rda") ##################################
save(totaldata, file = "Shiny/data/totaldata.Rda")
View(totaldata)
shortTable <- function() {
lightred = "#ff7f7f"
outputTable <- formattable(shortTable_data, list(
"Total Excess Deaths"              = color_tile("white", lightred),
"Highest Excess Deaths in a Week"  = color_bar(lightred),
"Percentage of Normal Deaths"      = color_bar(lightred),
"Statistically Significant"        =
formatter("span", style = x ~ ifelse(substring(x, 1, 5) == "Above",
style(color = "red",
font.weight = "bold"),
NA))))
return (outputTable)
}
shortTable()
library(shiny)
library(ggplot2)
library(plotly)
load("data/totaldata.Rda")
load("data/MLModel.Rda")
load("data/table.Rda")
data <- totaldata
ui <- fluidPage(
fluidRow(
#column(width = 1, tags$a(href = "https://olavik17.shinyapps.io/shiny/?_ga=2.219468638.671758994.1603877082-1160339763.1603877082", tags$img(height = 70, width = 125, src = "www/covid_19.png"))),
column(width = 12, align = "center", headerPanel(tags$h1("Covid-19 dashboard")))
),
fluidRow(
column(width = 12, align = "center", tags$p("A dashboard of excess deaths statistics in the Covid-19 pandemic", tags$em("Covid-19"), "in", tags$strong("Shiny"), "app.") )
),
tabsetPanel(
tabPanel(title = "Main",
br(),
p("Try to make your prefered plotoutput" ,style="text-align:justify;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br(),
sidebarLayout(
sidebarPanel(
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: gray}")),
sliderInput(inputId = "week",
label = "Range of weeks",
min = min(data$week),
max = max(data$week),
value = c(min(data$week), max(data$week))),
checkboxGroupInput(inputId = "countries",
label = "Select countries",
choices = levels(data$country),
choiceNames = names(data),
selected = levels(data$country)),
# selectInput(inputId = 'x',
#             label = 'X',
#             choices = c("week"),
#             selected = "week"),
selectInput(inputId = 'y',
label = 'Y',
choices = c(Deaths = "deaths", "Excess Deaths" = "excess_deaths", "Expected Deaths" = "expected_deaths"),
selected = "deaths"),
selectInput(inputId = 'color',
label = 'Color',
choices = c('None', Gender = "gender", Agegroup = "agegroup", Week = "week", Country = "country", Deaths = "deaths", "Expected Deaths" = "expected_deaths", "Excess Deaths" = "excess_deaths"),
selected = "gender"),
#checkboxInput(inputId = 'jitter',
#             label = 'Jitter'),
checkboxInput(inputId = 'smooth',
label = 'Smooth',
value = TRUE),
checkboxInput(inputId = "actual",
label = "Actual deaths",
value = TRUE),
checkboxInput(inputId = "expected",
label = "Expected deaths",
value = TRUE),
selectInput(inputId = 'facet_row',
label = 'Facet Row',
choices = c(None='.', Gender = "gender", Agegroup = "agegroup", Country = "country"),
selected = "agegroup"),
selectInput(inputId ='facet_col',
label = 'Facet Column',
choices = c(None='.', Gender = "gender", Agegroup = "agegroup", Country = "country"),
selected = "country"),
),
mainPanel(
plotlyOutput('plot', height = 700)
))
),
# Plot adjusted by table
tabPanel(title = "Table",
br(),
p("By filtering data in the table, the plot will adjust" ,style="text-align:justify;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br(),
sidebarLayout(
sidebarPanel(
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: gray}")),
DT::dataTableOutput("tableALL"),
width = 7
),
mainPanel(
plotlyOutput('ggplotTable', height = 500),
width = 5
))
),
# ML prediction
tabPanel(title = "Prediction",
br(),
p("Prediction by machine learning", style="text-align:justify;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br(),
sidebarLayout(
sidebarPanel(
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: gray}")),
selectInput(inputId = "country",
label = h3("Country"),
choices = levels(MLdata$country),
selected = "France"),
selectInput(inputId = "gender",
label = h3("Gender"),
choices = levels(MLdata$gender),
selected = "F"),
selectInput(inputId = "agegroup",
label =h3("Agegroup"),
choices = levels(MLdata$agegroup),
selected = "0-64"),
numericInput(inputId = "deaths",
h3("Deaths"),
value = 0)
),
mainPanel(
br(),
h3("Prediction"),
p("Based on the data of five european countries we split our data into train data and test data in 80/20 ratio.\n"),
p("We define several models based on the features country, gender, agegroup and the number of deaths in a given week. The best
model based is chosen based on its RMSE (Root-mean-square error)"),
br(),
h4("Excess deaths based on input parameters:", style="text-align:center"),
h3(textOutput("prediction_excess_deaths"), style="text-align:center;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br()
),
)
),
#Short tabel
tabPanel(title = "Short Tabel",
br(),
p("Short tabel", style="text-align:justify;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br(),
sidebarLayout(
mainPanel(
h3(formattableOutput("shortable"))
),
)
)
),
)
library(shiny)
library(ggplot2)
library(plotly)
load("data/totaldata.Rda")
load("data/MLModel.Rda")
load("data/table.Rda")
data <- totaldata
ui <- fluidPage(
fluidRow(
#column(width = 1, tags$a(href = "https://olavik17.shinyapps.io/shiny/?_ga=2.219468638.671758994.1603877082-1160339763.1603877082", tags$img(height = 70, width = 125, src = "www/covid_19.png"))),
column(width = 12, align = "center", headerPanel(tags$h1("Covid-19 dashboard")))
),
fluidRow(
column(width = 12, align = "center", tags$p("A dashboard of excess deaths statistics in the Covid-19 pandemic", tags$em("Covid-19"), "in", tags$strong("Shiny"), "app.") )
),
tabsetPanel(
tabPanel(title = "Main",
br(),
p("Try to make your prefered plotoutput" ,style="text-align:justify;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br(),
sidebarLayout(
sidebarPanel(
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: gray}")),
sliderInput(inputId = "week",
label = "Range of weeks",
min = min(data$week),
max = max(data$week),
value = c(min(data$week), max(data$week))),
checkboxGroupInput(inputId = "countries",
label = "Select countries",
choices = levels(data$country),
choiceNames = names(data),
selected = levels(data$country)),
# selectInput(inputId = 'x',
#             label = 'X',
#             choices = c("week"),
#             selected = "week"),
selectInput(inputId = 'y',
label = 'Y',
choices = c(Deaths = "deaths", "Excess Deaths" = "excess_deaths", "Expected Deaths" = "expected_deaths"),
selected = "deaths"),
selectInput(inputId = 'color',
label = 'Color',
choices = c('None', Gender = "gender", Agegroup = "agegroup", Week = "week", Country = "country", Deaths = "deaths", "Expected Deaths" = "expected_deaths", "Excess Deaths" = "excess_deaths"),
selected = "gender"),
#checkboxInput(inputId = 'jitter',
#             label = 'Jitter'),
checkboxInput(inputId = 'smooth',
label = 'Smooth',
value = TRUE),
checkboxInput(inputId = "actual",
label = "Actual deaths",
value = TRUE),
checkboxInput(inputId = "expected",
label = "Expected deaths",
value = TRUE),
selectInput(inputId = 'facet_row',
label = 'Facet Row',
choices = c(None='.', Gender = "gender", Agegroup = "agegroup", Country = "country"),
selected = "agegroup"),
selectInput(inputId ='facet_col',
label = 'Facet Column',
choices = c(None='.', Gender = "gender", Agegroup = "agegroup", Country = "country"),
selected = "country"),
),
mainPanel(
plotlyOutput('plot', height = 700)
))
),
# Plot adjusted by table
tabPanel(title = "Table",
br(),
p("By filtering data in the table, the plot will adjust" ,style="text-align:justify;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br(),
sidebarLayout(
sidebarPanel(
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: gray}")),
DT::dataTableOutput("tableALL"),
width = 7
),
mainPanel(
plotlyOutput('ggplotTable', height = 500),
width = 5
))
),
# ML prediction
tabPanel(title = "Prediction",
br(),
p("Prediction by machine learning", style="text-align:justify;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br(),
sidebarLayout(
sidebarPanel(
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: gray}")),
selectInput(inputId = "country",
label = h3("Country"),
choices = levels(MLdata$country),
selected = "France"),
selectInput(inputId = "gender",
label = h3("Gender"),
choices = levels(MLdata$gender),
selected = "F"),
selectInput(inputId = "agegroup",
label =h3("Agegroup"),
choices = levels(MLdata$agegroup),
selected = "0-64"),
numericInput(inputId = "deaths",
h3("Deaths"),
value = 0)
),
mainPanel(
br(),
h3("Prediction"),
p("Based on the data of five european countries we split our data into train data and test data in 80/20 ratio.\n"),
p("We define several models based on the features country, gender, agegroup and the number of deaths in a given week. The best
model based is chosen based on its RMSE (Root-mean-square error)"),
br(),
h4("Excess deaths based on input parameters:", style="text-align:center"),
h3(textOutput("prediction_excess_deaths"), style="text-align:center;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br()
),
)
),
#Short tabel
tabPanel(title = "Short Tabel",
br(),
p("Short tabel", style="text-align:justify;color:white;background-color:#0269A4;padding:15px;border-radius:10px"),
br(),
sidebarLayout(
mainPanel(
h3(formattableOutput("shortable"))
),
)
)
),
)
View(data)
load("data/MLModel.Rda")
